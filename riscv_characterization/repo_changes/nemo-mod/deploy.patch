--- nemo/transf/deploy.py	2023-10-03 20:31:16.161056647 +0200
+++ nemo-mod/transf/deploy.py	2023-10-03 20:34:42.645857574 +0200
@@ -65,6 +65,38 @@
             m.kappa.data[:] += m.eps_kappa/2
             m.lamda.data[:] += m.eps_lamda/2
 
+def _harden_bias_pact(self, **kwargs):
+    r"""Harden all bias in the network to their quantized value.
+
+    """
+
+    for n,m in self.named_modules():
+        if (m.__class__.__name__ == "PACT_Conv2d" or \
+            m.__class__.__name__ == "PACT_Conv1d" or \
+            m.__class__.__name__ == "PACT_Linear"):
+            if(m.bias is not None):
+                m.train_loop_oldprec_b = float(m.b_beta.item()+m.b_alpha.item())/(2.0**(m.b_precision.get_bits())-1)
+                m.harden_bias(**kwargs)
+        if (m.__class__.__name__ == "PACT_QuantizedBatchNormNd"):
+            m.harden_bias(**kwargs)
+
+def _round_bias_pact(self, **kwargs):
+    r"""Round all bias in the network adding 1/2 an eps.
+
+    """
+
+    for n,m in self.named_modules():
+        if (m.__class__.__name__ == "PACT_Conv2d" or \
+            m.__class__.__name__ == "PACT_Conv1d" or \
+            m.__class__.__name__ == "PACT_Linear"):
+             if(m.bias is not None):
+                m.bias.data[:] += (m.b_beta.item()+m.b_alpha.item())/(2.0**(m.b_precision.get_bits())-1) / 2
+        #if (m.__class__.__name__ == "PACT_QuantizedBatchNormNd"):
+        #    m.kappa.data[:] += m.eps_kappa/2
+        #    m.lamda.data[:] += m.eps_lamda/2
+
+
+
 def _set_deployment_pact(self, eps_in, only_activations=False, **kwargs):
     r"""Sets the network in deployment mode, enabling saving it to ONNX format or similar.
 
@@ -133,7 +165,9 @@
     if prune_empty_bn:
         self.prune_empty_bn(threshold=1e-9)
     self.round_weights()
+    self.round_bias() 
     self.harden_weights()
+    self.harden_bias()
     if add_input_bias_dict:
         self.add_input_bias(add_input_bias_dict)
     if remove_bias_dict:
@@ -153,7 +187,8 @@
         self.calibrate_bn(minmax=False, range_factor=bn_calibration_range_factor, **kwargs)
     self.set_deployment(eps_in=eps_in, **kwargs) # repeat, to fix BN eps
     self.harden_weights()
-
+    self.harden_bias()
+    
 def _id_stage(self, eps_in=None, **kwargs):
     r"""High-level function to move the network from QD to ID stage.
 
